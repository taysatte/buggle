generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String?  @unique
  name              String?
  avatarUrl         String?
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  experiencePoints  Int      @default(0)
  preferredLanguage String?
  theme             String?  @default("dark")
  submissions       Submission[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Submission {
  id        Int      @id @default(autoincrement())
  attempts  Int
  timeTaken Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  puzzleId  Int
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])
  createdAt DateTime @default(now())
  @@unique([userId, puzzleId])
}

model Puzzle {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  starterCode String   @db.Text // Buggy/template code shown to users
  solutionCode String? @db.Text // Optional: correct solution (for hints/validation)
  difficulty  String?  // e.g., "easy", "medium", "hard"
  hints       String?  @db.Text // Optional hints for users
  language    String?  // Default language for this puzzle
  testCases   TestCase[]
  submissions Submission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TestCase {
  id             Int    @id @default(autoincrement())
  input          String @db.Text // JSON string or raw input
  expectedOutput String @db.Text // Expected output as string
  isPublic       Boolean @default(true) // Visible to users vs hidden validation tests
  puzzleId       Int
  puzzle         Puzzle @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
}
